{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 二维柱状图过滤器 - 实现第一个功能，并调试第一个错误\n",
    "编写代码很重要。但是，要加入一个无人驾驶汽车团队，你的很大一部分工作是与现有的**大型**代码库打交道的。在诸如无人驾驶汽车之类的高风险工程项目中，你可能必须首先获得经理和同事的信任，然后才能让你对代码库进行重大更改。\n",
    "\n",
    "对于团队的新进成员来说，典型的一个任务就是通过许多错误获得进步。所以考虑到这一点，这就是在该纳米学位项目中，你将为你的第一个项目所做的事情。\n",
    "\n",
    "这个项目包括以下几个部分：\n",
    "\n",
    "1. **探索代码** - 此时不要担心错误。我们的目标是熟悉这个代码库的组织方式，并弄清楚各部分分别是做什么的。\n",
    "2. **实现一个功能** - 编写出能让机器人正确移动的代码。\n",
    "3. **修正错误** - 执行动作时，一个以前没有出现过的错误就会显示出来。在这里，你需要确定这个错误是什么，并采取措施进行重现，然后找出原因并加以解决。\n",
    "\n",
    "\n",
    "## 第1部分：探索代码\n",
    "在这一部分，你只需运行一些现有代码，即可对定位器的概况有所熟悉。\n",
    "\n",
    "你可以使用键盘上的箭头键浏览此 notebook 。你可以通过按下**`Ctrl + Enter`** 即可在单元格中运行代码。\n",
    "\n",
    "浏览下面的单元格。在每个单元格，你应该：\n",
    "\n",
    "1. 通读代码。如果这时你没有完全理解所有的代码，没关系。\n",
    "2. 猜一猜运行代码时会发生什么。\n",
    "3. 运行代码，并将你所看到的与你的预期进行比较。\n",
    "4. 浏览到**TODO** 部分时，请仔细阅读说明，并完成相关任务。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "# This code \"imports\" code from some of the other files we've written\n",
    "# in this directory. Specifically simulate.py and helpers.py\n",
    "import simulate as sim\n",
    "import helpers\n",
    "import localizer\n",
    "\n",
    "# Don't worry too much about this code for now...\n",
    "from __future__ import division, print_function\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf99653950>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This code defines a 5x5 robot world as well as some other parameters\n",
    "# which we will discuss later. It then creates a simulation and shows \n",
    "# the initial beliefs. \n",
    "R = 'r'\n",
    "G = 'g'\n",
    "grid = [\n",
    "    [R,G,G,G,R],\n",
    "    [G,G,R,G,R],\n",
    "    [G,R,G,G,G],\n",
    "    [R,R,G,R,G],\n",
    "    [R,G,R,G,R],\n",
    "]\n",
    "blur = 0.05\n",
    "p_hit = 200.0\n",
    "simulation = sim.Simulation(grid, blur, p_hit)\n",
    "simulation.show_beliefs()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "重复按下Ctrl + Enter，多次运行该代码。\n",
    "\n",
    "每次运行后，观察状态是如何改变的。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf99615ad0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "simulation.run(1)\n",
    "simulation.show_beliefs()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "你认为调用`run` 是用来做什么的？看一看**`simulate.py`**中的代码，并找出答案。\n",
    "\n",
    "花几分钟看一看`run`方法及其调用的方法，熟悉一下具体是如何工作的。\n",
    "\n",
    "#### 我在看什么？\n",
    "\n",
    "红色星星表示机器人的真实位置。蓝色圆圈表示机器人认为它处于任何一个特定位置的信念强度。\n",
    "\n",
    "理想情况下，我们希望最大的蓝色圆圈与红色星星处于相同的位置。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We will provide you with the function below to help you look\n",
    "# at the raw numbers.\n",
    "\n",
    "def show_rounded_beliefs(beliefs):\n",
    "    for row in beliefs:\n",
    "        for belief in row:\n",
    "            print(\"{:0.3f}\".format(belief), end=\"  \")\n",
    "        print()\n",
    "        \n",
    "# The {:0.3f} notation is an example of \"string \n",
    "# formatting\" in Python. You can learn more about string \n",
    "# formatting at https://pyformat.info/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.002  0.002  0.069  0.069  0.002  \n",
      "0.069  0.070  0.070  0.003  0.002  \n",
      "0.003  0.070  0.004  0.069  0.069  \n",
      "0.069  0.069  0.070  0.070  0.003  \n",
      "0.002  0.002  0.003  0.070  0.069  \n"
     ]
    }
   ],
   "source": [
    "show_rounded_beliefs(simulation.beliefs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_____\n",
    "\n",
    "## 第2部分：实现2D感测函数\n",
    "正如你所看到的，机器人的判断并没有改变。无论我们调用多少次这个模拟的感测方法，机器人的判断都没有发生变化，它的判断是一致的。\n",
    "\n",
    "### 说明\n",
    "1. 打开`localizer.py`并完成`sense`函数。\n",
    "2. 运行下面单元格中的代码，导入定位器模块（或重新加载它），然后测试你的感测函数。\n",
    "3. 如果测试通过，表明你已经成功实现了第一个功能！继续进行这个项目吧。如果测试没有通过（可能不会出现在测试的前几次），继续修改你的`sense`函数，直到通过测试！"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.09090909090909091, 0.09090909090909091, 0.09090909090909091], [0.09090909090909091, 0.27272727272727276, 0.09090909090909091], [0.09090909090909091, 0.09090909090909091, 0.09090909090909091]]\n",
      "Tests pass! Your sense function is working as expected\n"
     ]
    }
   ],
   "source": [
    "reload(localizer)\n",
    "def test_sense():\n",
    "    R = 'r'\n",
    "    _ = 'g'\n",
    "\n",
    "    simple_grid = [\n",
    "        [_,_,_],\n",
    "        [_,R,_],\n",
    "        [_,_,_]\n",
    "    ]\n",
    "\n",
    "    p = 1.0 / 9\n",
    "    initial_beliefs = [\n",
    "        [p,p,p],\n",
    "        [p,p,p],\n",
    "        [p,p,p]\n",
    "    ]\n",
    "\n",
    "    observation = R\n",
    "\n",
    "    expected_beliefs_after = [\n",
    "        [1/11, 1/11, 1/11],\n",
    "        [1/11, 3/11, 1/11],\n",
    "        [1/11, 1/11, 1/11]\n",
    "    ]\n",
    "\n",
    "    p_hit  = 3.0\n",
    "    p_miss = 1.0\n",
    "    beliefs_after_sensing = localizer.sense(\n",
    "        observation, simple_grid, initial_beliefs, p_hit, p_miss)\n",
    "    print(beliefs_after_sensing)\n",
    "    if helpers.close_enough(beliefs_after_sensing, expected_beliefs_after):\n",
    "        print(\"Tests pass! Your sense function is working as expected\")\n",
    "        return\n",
    "    \n",
    "    elif not isinstance(beliefs_after_sensing, list):\n",
    "        print(\"Your sense function doesn't return a list!\")\n",
    "        return\n",
    "        \n",
    "    elif len(beliefs_after_sensing) != len(expected_beliefs_after):\n",
    "        print(\"Dimensionality error! Incorrect height\")\n",
    "        return\n",
    "              \n",
    "    elif len(beliefs_after_sensing[0] ) != len(expected_beliefs_after[0]):\n",
    "        print(\"Dimensionality Error! Incorrect width\")\n",
    "        return\n",
    "    \n",
    "    elif beliefs_after_sensing == initial_beliefs:\n",
    "        print(\"Your code returns the initial beliefs.\")\n",
    "        return\n",
    "        \n",
    "    total_probability = 0.0\n",
    "    for row in beliefs_after_sensing:\n",
    "        for p in row:\n",
    "            total_probability += p\n",
    "    if abs(total_probability-1.0) > 0.001:\n",
    "        \n",
    "        print(\"Your beliefs appear to not be normalized\")\n",
    "        return\n",
    "    \n",
    "    print(\"Something isn't quite right with your sense function\")\n",
    "\n",
    "test_sense()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 集成测试\n",
    "在我们称之为“完整”之前，应该执行一次**集成测试**。虽然我们已经验证了感测函数可以独立使用，但这个定位器是否可以正常工作呢？\n",
    "\n",
    "我们来执行一个集成测试。首先，在下面的单元格中执行代码用于准备仿真环境。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from simulate import Simulation\n",
    "import simulate as sim\n",
    "import helpers\n",
    "reload(localizer)\n",
    "reload(sim)\n",
    "reload(helpers)\n",
    "\n",
    "R = 'r'\n",
    "G = 'g'\n",
    "grid = [\n",
    "    [R,G,G,G,R,R,R],\n",
    "    [G,G,R,G,R,G,R],\n",
    "    [G,R,G,G,G,G,R],\n",
    "    [R,R,G,R,G,G,G],\n",
    "    [R,G,R,G,R,R,R],\n",
    "    [G,R,R,R,G,R,G],\n",
    "    [R,R,R,G,R,G,G],\n",
    "]\n",
    "\n",
    "# Use small value for blur. This parameter is used to represent\n",
    "# the uncertainty in MOTION, not in sensing. We want this test\n",
    "# to focus on sensing functionality\n",
    "blur = 0.1\n",
    "p_hit = 100.0\n",
    "simulation = sim.Simulation(grid, blur, p_hit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf996285d0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use control+Enter to run this cell many times and observe how \n",
    "# the robot's belief that it is in each cell (represented by the\n",
    "# size of the corresponding circle) changes as the robot moves.\n",
    "# The true position of the robot is given by the red star.\n",
    "\n",
    "# Run this cell about 15-25 times and observe the results\n",
    "simulation.run(1)\n",
    "simulation.show_beliefs()\n",
    "\n",
    "# If everything is working correctly you should see the beliefs\n",
    "# converge to a single large circle at the same position as the \n",
    "# red star.\n",
    "#\n",
    "# When you are satisfied that everything is working, continue\n",
    "# to the next section"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 第3部分：识别并重现错误\n",
    "软件出现了错误，没关系。\n",
    "\n",
    "你的机器人用户会把这种错误称为技术支持与投诉，比如：\n",
    "\n",
    "> “我在一个方形的房间里使用你的机器人时，一切都很好，然后我试着在一个矩形房间里加载了一个地图，之后机器人行驶了几秒钟，突然就停止工作了。请修复一下吧！“\n",
    "\n",
    "现在，必须要进行调试。我们将采用系统化的方法试一试。\n",
    "\n",
    "1. 重现这个错误。\n",
    "2. 阅读（并理解）错误消息（当存在时）。\n",
    "3. 编写一个触发这个错误的测试。\n",
    "4. 生成一个错误成因的假设。\n",
    "5. 尝试解决它。如果修复了这个错误，太棒了！如果没有修复，请返回步骤4。\n",
    "\n",
    "### 第1步：重现错误\n",
    "根据用户的描述，**矩形环境**似乎是造成这个错误的原因。\n",
    "\n",
    "下面的代码与你在对新功能进行集成测试时使用的代码相同。看一看是否可以通过修改它来重现错误。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, -1, 0, -1, 3, 6)\n",
      "(0, 0, 0, -1, 0, 6)\n",
      "(0, 1, 0, -1, 1, 6)\n",
      "(0, -1, 0, 0, 3, 0)\n",
      "(0, 0, 0, 0, 0, 0)\n",
      "(0, 1, 0, 0, 1, 0)\n",
      "(0, -1, 0, 1, 3, 1)\n",
      "(0, 0, 0, 1, 0, 1)\n",
      "(0, 1, 0, 1, 1, 1)\n",
      "(0, -1, 1, -1, 3, 0)\n",
      "(0, 0, 1, -1, 0, 0)\n",
      "(0, 1, 1, -1, 1, 0)\n",
      "(0, -1, 1, 0, 3, 1)\n",
      "(0, 0, 1, 0, 0, 1)\n",
      "(0, 1, 1, 0, 1, 1)\n",
      "(0, -1, 1, 1, 3, 2)\n",
      "(0, 0, 1, 1, 0, 2)\n",
      "(0, 1, 1, 1, 1, 2)\n",
      "(0, -1, 2, -1, 3, 1)\n",
      "(0, 0, 2, -1, 0, 1)\n",
      "(0, 1, 2, -1, 1, 1)\n",
      "(0, -1, 2, 0, 3, 2)\n",
      "(0, 0, 2, 0, 0, 2)\n",
      "(0, 1, 2, 0, 1, 2)\n",
      "(0, -1, 2, 1, 3, 3)\n",
      "(0, 0, 2, 1, 0, 3)\n",
      "(0, 1, 2, 1, 1, 3)\n",
      "(0, -1, 3, -1, 3, 2)\n",
      "(0, 0, 3, -1, 0, 2)\n",
      "(0, 1, 3, -1, 1, 2)\n",
      "(0, -1, 3, 0, 3, 3)\n",
      "(0, 0, 3, 0, 0, 3)\n",
      "(0, 1, 3, 0, 1, 3)\n",
      "(0, -1, 3, 1, 3, 4)\n",
      "(0, 0, 3, 1, 0, 4)\n",
      "(0, 1, 3, 1, 1, 4)\n",
      "(0, -1, 4, -1, 3, 3)\n",
      "(0, 0, 4, -1, 0, 3)\n",
      "(0, 1, 4, -1, 1, 3)\n",
      "(0, -1, 4, 0, 3, 4)\n",
      "(0, 0, 4, 0, 0, 4)\n",
      "(0, 1, 4, 0, 1, 4)\n",
      "(0, -1, 4, 1, 3, 5)\n",
      "(0, 0, 4, 1, 0, 5)\n",
      "(0, 1, 4, 1, 1, 5)\n",
      "(0, -1, 5, -1, 3, 4)\n",
      "(0, 0, 5, -1, 0, 4)\n",
      "(0, 1, 5, -1, 1, 4)\n",
      "(0, -1, 5, 0, 3, 5)\n",
      "(0, 0, 5, 0, 0, 5)\n",
      "(0, 1, 5, 0, 1, 5)\n",
      "(0, -1, 5, 1, 3, 6)\n",
      "(0, 0, 5, 1, 0, 6)\n",
      "(0, 1, 5, 1, 1, 6)\n",
      "(0, -1, 6, -1, 3, 5)\n",
      "(0, 0, 6, -1, 0, 5)\n",
      "(0, 1, 6, -1, 1, 5)\n",
      "(0, -1, 6, 0, 3, 6)\n",
      "(0, 0, 6, 0, 0, 6)\n",
      "(0, 1, 6, 0, 1, 6)\n",
      "(0, -1, 6, 1, 3, 0)\n",
      "(0, 0, 6, 1, 0, 0)\n",
      "(0, 1, 6, 1, 1, 0)\n",
      "(1, -1, 0, -1, 0, 6)\n",
      "(1, 0, 0, -1, 1, 6)\n",
      "(1, 1, 0, -1, 2, 6)\n",
      "(1, -1, 0, 0, 0, 0)\n",
      "(1, 0, 0, 0, 1, 0)\n",
      "(1, 1, 0, 0, 2, 0)\n",
      "(1, -1, 0, 1, 0, 1)\n",
      "(1, 0, 0, 1, 1, 1)\n",
      "(1, 1, 0, 1, 2, 1)\n",
      "(1, -1, 1, -1, 0, 0)\n",
      "(1, 0, 1, -1, 1, 0)\n",
      "(1, 1, 1, -1, 2, 0)\n",
      "(1, -1, 1, 0, 0, 1)\n",
      "(1, 0, 1, 0, 1, 1)\n",
      "(1, 1, 1, 0, 2, 1)\n",
      "(1, -1, 1, 1, 0, 2)\n",
      "(1, 0, 1, 1, 1, 2)\n",
      "(1, 1, 1, 1, 2, 2)\n",
      "(1, -1, 2, -1, 0, 1)\n",
      "(1, 0, 2, -1, 1, 1)\n",
      "(1, 1, 2, -1, 2, 1)\n",
      "(1, -1, 2, 0, 0, 2)\n",
      "(1, 0, 2, 0, 1, 2)\n",
      "(1, 1, 2, 0, 2, 2)\n",
      "(1, -1, 2, 1, 0, 3)\n",
      "(1, 0, 2, 1, 1, 3)\n",
      "(1, 1, 2, 1, 2, 3)\n",
      "(1, -1, 3, -1, 0, 2)\n",
      "(1, 0, 3, -1, 1, 2)\n",
      "(1, 1, 3, -1, 2, 2)\n",
      "(1, -1, 3, 0, 0, 3)\n",
      "(1, 0, 3, 0, 1, 3)\n",
      "(1, 1, 3, 0, 2, 3)\n",
      "(1, -1, 3, 1, 0, 4)\n",
      "(1, 0, 3, 1, 1, 4)\n",
      "(1, 1, 3, 1, 2, 4)\n",
      "(1, -1, 4, -1, 0, 3)\n",
      "(1, 0, 4, -1, 1, 3)\n",
      "(1, 1, 4, -1, 2, 3)\n",
      "(1, -1, 4, 0, 0, 4)\n",
      "(1, 0, 4, 0, 1, 4)\n",
      "(1, 1, 4, 0, 2, 4)\n",
      "(1, -1, 4, 1, 0, 5)\n",
      "(1, 0, 4, 1, 1, 5)\n",
      "(1, 1, 4, 1, 2, 5)\n",
      "(1, -1, 5, -1, 0, 4)\n",
      "(1, 0, 5, -1, 1, 4)\n",
      "(1, 1, 5, -1, 2, 4)\n",
      "(1, -1, 5, 0, 0, 5)\n",
      "(1, 0, 5, 0, 1, 5)\n",
      "(1, 1, 5, 0, 2, 5)\n",
      "(1, -1, 5, 1, 0, 6)\n",
      "(1, 0, 5, 1, 1, 6)\n",
      "(1, 1, 5, 1, 2, 6)\n",
      "(1, -1, 6, -1, 0, 5)\n",
      "(1, 0, 6, -1, 1, 5)\n",
      "(1, 1, 6, -1, 2, 5)\n",
      "(1, -1, 6, 0, 0, 6)\n",
      "(1, 0, 6, 0, 1, 6)\n",
      "(1, 1, 6, 0, 2, 6)\n",
      "(1, -1, 6, 1, 0, 0)\n",
      "(1, 0, 6, 1, 1, 0)\n",
      "(1, 1, 6, 1, 2, 0)\n",
      "(2, -1, 0, -1, 1, 6)\n",
      "(2, 0, 0, -1, 2, 6)\n",
      "(2, 1, 0, -1, 3, 6)\n",
      "(2, -1, 0, 0, 1, 0)\n",
      "(2, 0, 0, 0, 2, 0)\n",
      "(2, 1, 0, 0, 3, 0)\n",
      "(2, -1, 0, 1, 1, 1)\n",
      "(2, 0, 0, 1, 2, 1)\n",
      "(2, 1, 0, 1, 3, 1)\n",
      "(2, -1, 1, -1, 1, 0)\n",
      "(2, 0, 1, -1, 2, 0)\n",
      "(2, 1, 1, -1, 3, 0)\n",
      "(2, -1, 1, 0, 1, 1)\n",
      "(2, 0, 1, 0, 2, 1)\n",
      "(2, 1, 1, 0, 3, 1)\n",
      "(2, -1, 1, 1, 1, 2)\n",
      "(2, 0, 1, 1, 2, 2)\n",
      "(2, 1, 1, 1, 3, 2)\n",
      "(2, -1, 2, -1, 1, 1)\n",
      "(2, 0, 2, -1, 2, 1)\n",
      "(2, 1, 2, -1, 3, 1)\n",
      "(2, -1, 2, 0, 1, 2)\n",
      "(2, 0, 2, 0, 2, 2)\n",
      "(2, 1, 2, 0, 3, 2)\n",
      "(2, -1, 2, 1, 1, 3)\n",
      "(2, 0, 2, 1, 2, 3)\n",
      "(2, 1, 2, 1, 3, 3)\n",
      "(2, -1, 3, -1, 1, 2)\n",
      "(2, 0, 3, -1, 2, 2)\n",
      "(2, 1, 3, -1, 3, 2)\n",
      "(2, -1, 3, 0, 1, 3)\n",
      "(2, 0, 3, 0, 2, 3)\n",
      "(2, 1, 3, 0, 3, 3)\n",
      "(2, -1, 3, 1, 1, 4)\n",
      "(2, 0, 3, 1, 2, 4)\n",
      "(2, 1, 3, 1, 3, 4)\n",
      "(2, -1, 4, -1, 1, 3)\n",
      "(2, 0, 4, -1, 2, 3)\n",
      "(2, 1, 4, -1, 3, 3)\n",
      "(2, -1, 4, 0, 1, 4)\n",
      "(2, 0, 4, 0, 2, 4)\n",
      "(2, 1, 4, 0, 3, 4)\n",
      "(2, -1, 4, 1, 1, 5)\n",
      "(2, 0, 4, 1, 2, 5)\n",
      "(2, 1, 4, 1, 3, 5)\n",
      "(2, -1, 5, -1, 1, 4)\n",
      "(2, 0, 5, -1, 2, 4)\n",
      "(2, 1, 5, -1, 3, 4)\n",
      "(2, -1, 5, 0, 1, 5)\n",
      "(2, 0, 5, 0, 2, 5)\n",
      "(2, 1, 5, 0, 3, 5)\n",
      "(2, -1, 5, 1, 1, 6)\n",
      "(2, 0, 5, 1, 2, 6)\n",
      "(2, 1, 5, 1, 3, 6)\n",
      "(2, -1, 6, -1, 1, 5)\n",
      "(2, 0, 6, -1, 2, 5)\n",
      "(2, 1, 6, -1, 3, 5)\n",
      "(2, -1, 6, 0, 1, 6)\n",
      "(2, 0, 6, 0, 2, 6)\n",
      "(2, 1, 6, 0, 3, 6)\n",
      "(2, -1, 6, 1, 1, 0)\n",
      "(2, 0, 6, 1, 2, 0)\n",
      "(2, 1, 6, 1, 3, 0)\n",
      "(3, -1, 0, -1, 2, 6)\n",
      "(3, 0, 0, -1, 3, 6)\n",
      "(3, 1, 0, -1, 0, 6)\n",
      "(3, -1, 0, 0, 2, 0)\n",
      "(3, 0, 0, 0, 3, 0)\n",
      "(3, 1, 0, 0, 0, 0)\n",
      "(3, -1, 0, 1, 2, 1)\n",
      "(3, 0, 0, 1, 3, 1)\n",
      "(3, 1, 0, 1, 0, 1)\n",
      "(3, -1, 1, -1, 2, 0)\n",
      "(3, 0, 1, -1, 3, 0)\n",
      "(3, 1, 1, -1, 0, 0)\n",
      "(3, -1, 1, 0, 2, 1)\n",
      "(3, 0, 1, 0, 3, 1)\n",
      "(3, 1, 1, 0, 0, 1)\n",
      "(3, -1, 1, 1, 2, 2)\n",
      "(3, 0, 1, 1, 3, 2)\n",
      "(3, 1, 1, 1, 0, 2)\n",
      "(3, -1, 2, -1, 2, 1)\n",
      "(3, 0, 2, -1, 3, 1)\n",
      "(3, 1, 2, -1, 0, 1)\n",
      "(3, -1, 2, 0, 2, 2)\n",
      "(3, 0, 2, 0, 3, 2)\n",
      "(3, 1, 2, 0, 0, 2)\n",
      "(3, -1, 2, 1, 2, 3)\n",
      "(3, 0, 2, 1, 3, 3)\n",
      "(3, 1, 2, 1, 0, 3)\n",
      "(3, -1, 3, -1, 2, 2)\n",
      "(3, 0, 3, -1, 3, 2)\n",
      "(3, 1, 3, -1, 0, 2)\n",
      "(3, -1, 3, 0, 2, 3)\n",
      "(3, 0, 3, 0, 3, 3)\n",
      "(3, 1, 3, 0, 0, 3)\n",
      "(3, -1, 3, 1, 2, 4)\n",
      "(3, 0, 3, 1, 3, 4)\n",
      "(3, 1, 3, 1, 0, 4)\n",
      "(3, -1, 4, -1, 2, 3)\n",
      "(3, 0, 4, -1, 3, 3)\n",
      "(3, 1, 4, -1, 0, 3)\n",
      "(3, -1, 4, 0, 2, 4)\n",
      "(3, 0, 4, 0, 3, 4)\n",
      "(3, 1, 4, 0, 0, 4)\n",
      "(3, -1, 4, 1, 2, 5)\n",
      "(3, 0, 4, 1, 3, 5)\n",
      "(3, 1, 4, 1, 0, 5)\n",
      "(3, -1, 5, -1, 2, 4)\n",
      "(3, 0, 5, -1, 3, 4)\n",
      "(3, 1, 5, -1, 0, 4)\n",
      "(3, -1, 5, 0, 2, 5)\n",
      "(3, 0, 5, 0, 3, 5)\n",
      "(3, 1, 5, 0, 0, 5)\n",
      "(3, -1, 5, 1, 2, 6)\n",
      "(3, 0, 5, 1, 3, 6)\n",
      "(3, 1, 5, 1, 0, 6)\n",
      "(3, -1, 6, -1, 2, 5)\n",
      "(3, 0, 6, -1, 3, 5)\n",
      "(3, 1, 6, -1, 0, 5)\n",
      "(3, -1, 6, 0, 2, 6)\n",
      "(3, 0, 6, 0, 3, 6)\n",
      "(3, 1, 6, 0, 0, 6)\n",
      "(3, -1, 6, 1, 2, 0)\n",
      "(3, 0, 6, 1, 3, 0)\n",
      "(3, 1, 6, 1, 0, 0)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf994a6990>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from simulate import Simulation\n",
    "import simulate as sim\n",
    "import helpers\n",
    "reload(localizer)\n",
    "reload(sim)\n",
    "reload(helpers)\n",
    "\n",
    "R = 'r'\n",
    "G = 'g'\n",
    "\n",
    "grid = [ \n",
    "    [R,G,G,G,R,R,R],\n",
    "    [G,G,R,G,R,G,R],\n",
    "    [G,R,G,G,G,G,R],\n",
    "    [R,R,G,R,G,G,G],\n",
    "]\n",
    "\n",
    "blur = 0.001\n",
    "p_hit = 100.0\n",
    "simulation = sim.Simulation(grid, blur, p_hit)\n",
    "\n",
    "# remember, the user said that the robot would sometimes drive around for a bit...\n",
    "# It may take several calls to \"simulation.run\" to actually trigger the bug.\n",
    "simulation.run(1)\n",
    "simulation.show_beliefs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "simulation.run(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 第2步：阅读并理解错误消息\n",
    "如果你触发了这个错误，就应该在这个单元格的正上方看到一条错误消息。该消息的结尾应该是这样的："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "IndexError: list index out of range"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "而在这条消息的正上面，你应该看到了类似这样的代码："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path/to/your/directory/localizer.pyc in move(dy, dx, beliefs, blurring)\n",
    "     38             new_i = (i + dy ) % width\n",
    "     39             new_j = (j + dx ) % height\n",
    "---> 40             new_G[int(new_i)][int(new_j)] = cell\n",
    "     41     return blur(new_G, blurring)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这些代码表示，移动函数中的第40行导致出现了`IndexError`，因为“列表索引超出范围”。\n",
    "\n",
    "如果你不确定这表示什么含义，请使用Google！\n",
    "\n",
    "把`IndexError: list index out of range`复制粘贴在Google的搜索框！当我这样做时，我看到了下面的搜索结果：\n",
    "\n",
    "![Search Results](http://i.imgur.com/gleBmBy.png)\n",
    "\n",
    "浏览最上面的几个链接（通常这些都来自堆栈溢出），并阅读人们对这种错误的评论，直到你找到满意答案，了解该错误是如何产生的。\n",
    "\n",
    "### 第3步：编写一个重现错误的测试\n",
    "这样做可以帮助你了解何时修复它，并确保未来不会再出现这种错误。 你可能需要尝试许多潜在的解决方案，所以最好的情况是，只需调用一个函数即可确认该错误是否已修复。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) p new_j\n",
      "0\n",
      "(Pdb) p new_j new_i\n",
      "*** SyntaxError: SyntaxError('unexpected EOF while parsing', ('<string>', 1, 11, 'new_j new_i'))\n",
      "(Pdb) p new_j\n",
      "0\n",
      "(Pdb) p new_i\n",
      "1\n",
      "(Pdb) p new_G\n",
      "[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) n\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) s\n",
      "> /home/workspace/localizer.py(44)move()\n",
      "-> for j, cell in enumerate(row):\n",
      "(Pdb) s\n",
      "> /home/workspace/localizer.py(45)move()\n",
      "-> new_i = (i + dy) % width\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) p new_j\n",
      "2\n",
      "(Pdb) p new_i\n",
      "2\n",
      "(Pdb) help\n",
      "\n",
      "Documented commands (type help <topic>):\n",
      "========================================\n",
      "EOF    bt         cont      enable  jump  pp       run      unt   \n",
      "a      c          continue  exit    l     q        s        until \n",
      "alias  cl         d         h       list  quit     step     up    \n",
      "args   clear      debug     help    n     r        tbreak   w     \n",
      "b      commands   disable   ignore  next  restart  u        whatis\n",
      "break  condition  down      j       p     return   unalias  where \n",
      "\n",
      "Miscellaneous help topics:\n",
      "==========================\n",
      "exec  pdb\n",
      "\n",
      "Undocumented commands:\n",
      "======================\n",
      "retval  rv\n",
      "\n",
      "(Pdb) help p\n",
      "p expression\n",
      "Print the value of the expression.\n",
      "(Pdb) help pp\n",
      "pp expression\n",
      "Pretty-print the value of the expression.\n",
      "(Pdb) pp new_j\n",
      "2\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) help list\n",
      "l(ist) [first [,last]]\n",
      "List source code for the current file.\n",
      "Without arguments, list 11 lines around the current line\n",
      "or continue the previous listing.\n",
      "With one argument, list 11 lines starting at that line.\n",
      "With two arguments, list the given range;\n",
      "if the second argument is less than the first, it is a count.\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) \n",
      "(Pdb) \n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(47)move()\n",
      "-> pdb.set_trace()\n",
      "(Pdb) c\n",
      "> /home/workspace/localizer.py(48)move()\n",
      "-> new_G[int(new_j)][int(new_i)] = cell\n",
      "(Pdb) p new_j\n",
      "0\n",
      "(Pdb) p new_i\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "# According to the user, sometimes the robot actually does run \"for a while\" \n",
    "# - How can you change the code so the robot runs \"for a while\"?\n",
    "# - How many times do you need to call simulation.run() to consistently\n",
    "#   reproduce the bug?\n",
    "# Modify the code below so that when the function is called \n",
    "# it consistently reproduces the bug.\n",
    "def test_robot_works_in_rectangle_world():\n",
    "    from simulate import Simulation\n",
    "    import simulate as sim\n",
    "    import helpers\n",
    "    reload(localizer)\n",
    "    reload(sim)\n",
    "    reload(helpers)\n",
    "\n",
    "    R = 'r'\n",
    "    G = 'g'\n",
    "\n",
    "    grid = [ \n",
    "        [R,G,G,G,R,R,R],\n",
    "        [G,G,R,G,R,G,R],\n",
    "        [G,R,G,G,G,G,R],\n",
    "        [R,R,G,R,G,G,G],\n",
    "    ]\n",
    "\n",
    "    blur = 0.001\n",
    "    p_hit = 100.0\n",
    "    for i in range(1000):\n",
    "        simulation = sim.Simulation(grid, blur, p_hit)\n",
    "        simulation.run(1)\n",
    "    \n",
    "test_robot_works_in_rectangle_world()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 第4步：生成一个假设\n",
    "为了猜测错误出现的原因，使用一些Python调试工具会很有帮助。\n",
    "\n",
    " `pdb`模块（`p`ython `d`e`b`ugger）在这里会很有帮助！\n",
    "\n",
    "#### 设置调试器 \n",
    "1. 打开`localizer.py`并取消import pdb`的顶部的行的批注。\n",
    "2. 在导致出现错误`new_G[int(new_i)][int(new_j)] = cell`的代码行之前，添加一行新的代码`pdb.set_trace()` 。\n",
    "3. 通过调用你的测试函数运行这个测试（运行下面的单元格）。\n",
    "4. 你应该看到弹出了一个文本输入框！现在，在这个输入框中键入`c`并按回车键**继**续程序的执行。继续输入`c`并按回车键，直到再次触发这个错误。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_robot_works_in_rectangle_world()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 使用调试器\n",
    "调试器通过在代码中编写`pdb.set_trace()`的任何地方暂停程序执行来正常工作。你也可以访问你的代码中可以访问的任意变量。\n",
    "\n",
    "尝试再次运行你的测试。这一次，当文本输入框出现时，输入`new_i`并按回车键。你会在调试器窗口中看到`new_i`变量的值。多运行几次调试器：找到`new_j` 、`height` 与`new_i`的值。它们看起来是否合理或正确？\n",
    "\n",
    "之后，输入`c` ，继续执行程序。是否再次触发了那个错误？继续尝试，直到猜测到导致出现错误的原因。\n",
    "\n",
    "### 第5步：编写一个修复程序\n",
    "你有一个关于出现这个错误的假设。现在尝试修复它。完成后，再次调用你的测试函数。你可能希望删除（或标注出）添加到`localizer.py`中的行，即`pdb.set_trace()`。这样你的测试就可以运行了，而无需在调试器框中键入`c`。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_robot_works_in_rectangle_world()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 恭喜你！\n",
    "恭喜你！你已经实现了你的第一个功能，并成功调试了机器人在矩形环境中遇到的错误。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
